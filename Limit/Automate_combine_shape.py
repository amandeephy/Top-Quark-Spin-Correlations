import re
import ROOT
import numpy  as np
from   tqdm import tqdm

fileptr = open('filelist', 'r')
lines   = fileptr.readlines()

# Model outputs
ttbar_pred  = np.loadtxt('tt_df_model_pred.txt')
st_pred     = np.loadtxt('singletop.txt')
vv_pred     = np.loadtxt('vv.txt')

SUSY_count  = {}

# No branching ratio in this SUSY calculation
# wt_dict_standard = {145: 1026.0, 155: 754.5, 165: 566.1, 175: 429.9, 185: 332.1, 195: 259.59, 205: 204.78, 215: 162.81, 225: 130.68, 235: 105.66, 245: 86.34, 255: 70.83, 265: 58.47, 275: 48.45, 285: 40.56, 295: 34.17}
# wt_dict_extended = {('600', '415'): 0.6502642887021334, ('300', '125'): 23.165026521470487, ('700', '535'): 0.5763625844622253, ('550', '375'): 1.0588725739960165, ('550', '345'): 1.0586725006344626, ('350', '145'): 11.04720024192329, ('500', '315'): 1.781706023888856, ('650', '455'): 0.4650585973832704, ('650', '505'): 0.6210748439549455, ('850', '685'): 0.10034518744481015, ('600', '435'): 0.6514378776839669, ('500', '335'): 1.7808273225180504, ('900', '735'): 0.06734451340287866, ('400', '205'): 5.7033085161444435, ('900', '715'): 0.08868547262401187, ('750', '575'): 0.19653771800170564, ('800', '655'): 0.4631962164182743, ('450', '295'): 3.1045823739671943, ('400', '235'): 5.699885604390138, ('750', '605'): 0.34154096893774766, ('750', '555'): 0.22819503068622649, ('750', '595'): 0.4067080668523412, ('800', '645'): 0.4282687423925947, ('350', '195'): 11.053755069653313, ('600', '405'): 0.6514198858300937, ('500', '295'): 1.7831265588889667, ('900', '695'): 0.08575391987893566, ('500', '325'): 1.7804585263433452, ('500', '305'): 1.78172520522137, ('550', '395'): 1.0580071144730374, ('500', '345'): 1.7816532773538951, ('300', '145'): 23.168308898915548, ('650', '495'): 0.7227646781460054, ('850', '645'): 0.09799258914712476, ('850', '665'): 0.14302795910544594, ('900', '725'): 0.08570967611825919, ('400', '195'): 5.703280132578867, ('700', '515'): 0.48051021448228665, ('650', '465'): 0.49952426260704097, ('750', '545'): 0.2681120677084885, ('350', '205'): 11.05012414453701, ('700', '505'): 0.5301140950109035, ('600', '445'): 0.6499522513148706, ('450', '245'): 3.1061546532586055, ('800', '635'): 0.21894866230049745, ('800', '605'): 0.26346989856408903, ('350', '185'): 11.051717278353115, ('450', '305'): 3.1036854101700193, ('650', '485'): 0.4940078029708689, ('550', '385'): 1.0571196034182975, ('350', '175'): 11.051969784349502, ('700', '525'): 0.393650888323927, ('650', '445'): 0.44449806643341105, ('700', '495'): 0.34567506805477904, ('700', '555'): 0.45522970994625184, ('900', '755'): 0.053736702800209056, ('700', '545'): 0.4469228347096525, ('400', '215'): 5.701832945250462, ('600', '395'): 0.6500795016817481, ('300', '105'): 23.163256829563526, ('550', '405'): 1.059695237953963, ('350', '155'): 11.050150257781699, ('400', '245'): 5.705452291515753, ('400', '225'): 5.694221309439024, ('850', '695'): 0.14599023228019223, ('550', '355'): 1.0592562593889676, ('850', '655'): 0.10300514064321903, ('850', '705'): 0.11194798448848726, ('800', '625'): 0.211097428870351, ('400', '255'): 5.699039965388029, ('450', '285'): 3.1083369790741697, ('900', '705'): 0.07283820492386266, ('600', '425'): 0.6509759881225434, ('750', '585'): 0.28053159917776355, ('800', '595'): 0.38577244163499835, ('750', '565'): 0.3569505153864459, ('500', '355'): 1.7802287047088214, ('300', '155'): 23.20282148686771, ('450', '255'): 3.1034679611045854, ('600', '455'): 0.6506954545497787, ('450', '275'): 3.09977866128957, ('850', '675'): 0.1331482277083237, ('300', '115'): 23.179107778769037, ('800', '615'): 0.387225630260664, ('550', '365'): 1.058488186234653, ('300', '135'): 23.163170929070855, ('300', '95'): 23.1897273146474, ('900', '745'): 0.054802587111935905, ('350', '165'): 11.053441514387675, ('450', '265'): 3.1083127440822507, ('650', '475'): 1.093929472804132}

# With branching ratio
wt_dict_standard = {145: 108.243, 155: 79.59975, 165: 59.72355, 175: 45.35445, 185: 35.03655, 195: 27.38675, 205: 21.60429, 215: 17.17646, 225: 13.78674, 235: 11.14713, 245: 9.10887, 255: 7.47257, 265: 6.16858, 275: 5.11147, 285: 4.27908, 295: 3.60493}
wt_dict_extended = {('300', '105'): 2.43214, ('300', '115'): 2.43381, ('300', '125'): 2.43233, ('300', '135'): 2.43213, ('300', '145'): 2.43267, ('300', '155'): 2.4363, ('300', '95'): 2.43492, ('350', '145'): 1.15996, ('350', '155'): 1.16027, ('350', '165'): 1.16061, ('350', '175'): 1.16046, ('350', '185'): 1.16043, ('350', '195'): 1.16064, ('350', '205'): 1.16026, ('400', '195'): 0.59884, ('400', '205'): 0.59885, ('400', '215'): 0.59869, ('400', '225'): 0.59789, ('400', '235'): 0.59849, ('400', '245'): 0.59907, ('400', '255'): 0.5984, ('450', '245'): 0.32615, ('450', '255'): 0.32586, ('450', '265'): 0.32637, ('450', '275'): 0.32548, ('450', '285'): 0.32638, ('450', '295'): 0.32598, ('450', '305'): 0.32589, ('500', '295'): 0.18723, ('500', '305'): 0.18708, ('500', '315'): 0.18708, ('500', '325'): 0.18695, ('500', '335'): 0.18699, ('500', '345'): 0.18707, ('500', '355'): 0.18692, ('550', '345'): 0.11116, ('550', '355'): 0.11122, ('550', '365'): 0.11114, ('550', '375'): 0.11118, ('550', '385'): 0.111, ('550', '395'): 0.11109, ('550', '405'): 0.11127, ('600', '395'): 0.06826, ('600', '405'): 0.0684, ('600', '415'): 0.06828, ('600', '425'): 0.06835, ('600', '435'): 0.0684, ('600', '445'): 0.06824, ('600', '455'): 0.06832, ('650', '445'): 0.04667, ('650', '455'): 0.04883, ('650', '465'): 0.05245, ('650', '475'): 0.11486, ('650', '485'): 0.05187, ('650', '495'): 0.07589, ('650', '505'): 0.06521, ('700', '495'): 0.0363, ('700', '505'): 0.05566, ('700', '515'): 0.05045, ('700', '525'): 0.04133, ('700', '535'): 0.06052, ('700', '545'): 0.04693, ('700', '555'): 0.0478, ('750', '545'): 0.02815, ('750', '555'): 0.02396, ('750', '565'): 0.03748, ('750', '575'): 0.02064, ('750', '585'): 0.02946, ('750', '595'): 0.0427, ('750', '605'): 0.03586, ('800', '595'): 0.04051, ('800', '605'): 0.02766, ('800', '615'): 0.04066, ('800', '625'): 0.02217, ('800', '635'): 0.02299, ('800', '645'): 0.04497, ('800', '655'): 0.04864, ('850', '645'): 0.01029, ('850', '655'): 0.01082, ('850', '665'): 0.01502, ('850', '675'): 0.01398, ('850', '685'): 0.01054, ('850', '695'): 0.01533, ('850', '705'): 0.01175, ('900', '695'): 0.009, ('900', '705'): 0.00765, ('900', '715'): 0.00931, ('900', '725'): 0.009, ('900', '735'): 0.00707, ('900', '745'): 0.00575, ('900', '755'): 0.00564}

for line in tqdm(lines) :
    line      = line.strip('\n')
    mass_pts  = re.findall('[0-9]+', line)
    stop_mass = mass_pts[0]
    chi0_mass = mass_pts[2]

    if int(stop_mass) < 300 :
        SUSY_sf   = wt_dict_standard[int(stop_mass)]
        SUSY_pred = np.loadtxt(line) 

    else :
        SUSY_sf   = wt_dict_extended[(stop_mass, chi0_mass)] * 5.0 # To account for generator inefficiencies
        SUSY_pred = np.loadtxt(line)

    # Histograms for plotting
    h_ttbar = ROOT.TH1F('ttbar', 'ttbar', 15, 0 , 1)
    h_SUSY  = ROOT.TH1F('SUSY' , 'SUSY' , 15, 0 , 1)
    h_st    = ROOT.TH1F('st'   , 'st'   , 15, 0 , 1)
    h_vv    = ROOT.TH1F('vv'   , 'vv'   , 15, 0 , 1)

    line      = line.strip('.txt')
    opfile    = str(line) + '_shape_30fb.root' 
    opfileptr = ROOT.TFile(opfile, 'recreate')

    # Fill in the ttbar histogram
    for i in range(len(ttbar_pred)):
        h_ttbar.Fill(ttbar_pred[i])
    #scale_tt = 12.1 * 2.67   # HL_LHC, fraction used in training
    #scale_tt = 1.21 * 2.67   # 300 fb-1
    scale_tt  = 0.12 * 2.67   # 30 fb-1
    h_ttbar.Scale(scale_tt)

    # Fill in the SUSY histogram
    for i in range(len(SUSY_pred)):
        h_SUSY.Fill(SUSY_pred[i])
    #scale_SUSY  = SUSY_sf * 1.14       # HL_LHC, fraction used in training
    #scale_SUSY = SUSY_sf * 1.14 * 0.1  # 300 fb-1
    scale_SUSY = SUSY_sf * 1.14 * 0.01  # 30 fb-1
    h_SUSY.Scale(scale_SUSY)

    for i in range(len(st_pred)):
        h_st.Fill(st_pred[i])
    #scale_st  = 11.08    # 3000 fb-1
    #scale_st = 1.108    # 300 fb-1
    scale_st = 0.1108   # 30 fb-1
    h_st.Scale(scale_st)

    for i in range(len(vv_pred)):
        h_vv.Fill(vv_pred[i])

    #scale_vv  = 19.4    # 3000 fb-1
    #scale_vv = 1.94    # 300 fb-1
    scale_vv = 0.1940  # 30 fb-1
    h_vv.Scale(scale_vv)

    h_ttbar.Write()
    h_SUSY.Write()
    h_st.Write()
    h_vv.Write()

    opfileptr.Close()

    count    = 0
    tt_count = 0
    st_count = 0
    vv_count = 0

    for i in range(16) :
        count += h_SUSY.GetBinContent(i)

    SUSY_count[(stop_mass, chi0_mass)] = count

    for i in range(16) :
        tt_count += h_ttbar.GetBinContent(i)

    for i in range(16) :
        st_count += h_st.GetBinContent(i)

    for i in range(16) :
        vv_count += h_vv.GetBinContent(i)

    del h_SUSY, h_ttbar, h_st, h_vv

print(SUSY_count)
print(f'ttbar count :: {tt_count}')
print(f'single top count :: {st_count}')
print(f'VV count :: {vv_count}')
fileptr.close()